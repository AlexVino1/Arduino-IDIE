//Wi-Fi
void SIM900power()
{
  pinMode(9, OUTPUT);
  digitalWrite(9,LOW);
  delay(1000);
  digitalWrite(9,HIGH);
  delay(2000);
  digitalWrite(9,LOW);
  delay(3000);
}

// Создать объект программного последовательного порта для связи с SIM900
// Tx и Rx SIM900 подключены к выводам 7 и 8 Arduino
#include <SoftwareSerial.h>
SoftwareSerial mySerial(7, 8);
//MQ8&MQ9
#include <BaseMQ.h>
#include <MQ8.h>
#include <MQ9.h>
#include <TroykaMQ.h>
// имя для пина, к которому подключен датчик
#define PIN_MQ9         A1
// имя для пина, к которому подключен нагреватель датчика
#define PIN_MQ9_HEATER  5
// создаём объект для работы с датчиком
// и передаём ему номер пина выходного сигнала и нагревателя
MQ9 mq9(PIN_MQ9, PIN_MQ9_HEATER);

// имя для пина, к которому подключен датчик
#define PIN_MQ8         A0
// имя для пина, к которому подключен нагреватель датчика
#define PIN_MQ8_HEATER  4
// создаём объект для работы с датчиком
// и передаём ему номер пина выходного сигнала и нагревателя
MQ8 mq8(PIN_MQ8, PIN_MQ8_HEATER);
//BMP280
#include <Adafruit_BMP280.h>
Adafruit_BMP280 bmp280;

// переменная для интервала измерений
#define INTERVAL_GET_DATA 2000  // интервала измерений, мс
unsigned long millis_int1=0;
int pos=0;
int cont_ = 1;
int i=0;
int ch = 0;
String Inf = "";
String val = "";
//что-то
#include <Wire.h>
#include <SPI.h>


void setup() {
  // Начать последовательную связь Arduino и Arduino IDE (монитор последовательного порта)
  Serial.begin(9600);
  // Начать последовательную связь Arduino и SIM900
  mySerial.begin(9600);
  mySerial.println("AT+CLIP=1");  //включаем АОН
  delay(100);
  mySerial.println("AT+CMGF=1");  //режим кодировки СМС - обычный (для англ.)
  delay(100);
  mySerial.println("AT+CSCS=\"GSM\"");  //режим кодировки текста
  delay(100);
  
  Serial.println("Инициализация...");
  delay(1000);
  // Рукопожатие с SIM900
  mySerial.println("AT");
  updateSerial();
  delay(2000);
  // Тест качества сигнала, диапазон значений 0-31, 31 - лучший
  Serial.print("Уровень сигнала: ");mySerial.println("AT+CSQ");
  updateSerial();
  delay(2000);
  // Прочитать информацию о SIM карте, чтобы убедиться, что SIM карта подключена
  Serial.print("получение уникального серийного номера SIM-карты: ");mySerial.println("AT+CCID");
  updateSerial();
  delay(2000);
  // Проверяем, зарегистрирован ли модуль в сети
  Serial.print("Тип регистрации сети: ");mySerial.println("AT+CREG?");
  updateSerial();
  delay(2000);
  
  //MQ9
  // в течении 60 секунд на нагревательный элемент подаётся 5 вольт
  // в течении 90 секунд — 1,5 вольта
  mq9.cycleHeat();
  
  //MQ8
  mq8.heaterPwrHigh();
  
  //BMP280
  //инициализация
  while (!bmp280.begin(BMP280_ADDRESS - 1)) {
    Serial.println(F("Could not find a valid BMP280 sensor, check wiring!"));
 }
 delay(10000);
}

void loop()
{

  updateSerial();
  Serial.println("Battery: ");mySerial.println("AT+CBC");updateSerial();
  //Считывание данных
  float pressure = bmp280.readPressure();
  int altitude = bmp280.readAltitude();
  float temperature = bmp280.readTemperature(); 
  float density = (pressure*29)/(8.31*(temperature+273));  
  if (mySerial.available()) {  //если GSM модуль что-то послал нам, то
    while (mySerial.available()) {  //сохраняем входную строку в переменную val
      ch = mySerial.read();
      val += char(ch);
      delay(10);
    }
      Serial.println(val);  //печатаем в монитор порта пришедшую строку
    val = "";
     if (Serial.available()) {  //если в мониторе порта ввели что-то
    while (Serial.available()) {  //сохраняем строку в переменную val
      ch = Serial.read();
      val += char(ch);
      delay(10);
    }
    if (val.indexOf("sendsms") > -1) {  //если увидели команду отправки СМС
        if (mq8.isCalibrated() && mq8.heatingCompleted() && mq9.isCalibrated() && mq9.heatingCompleted()){
          sms(String(Inf), String("+XXXXXXXXXXX"));  //отправляем СМС на номер
          Inf = "";
        }
    }
        val = "";  //очищаем
    }
  }
  Serial.println("BMP280: ");updateSerial();
  Serial.print(" Давление: ");Serial.print(pressure);Serial.println(" Pa");updateSerial();
  Serial.print(" Высота: ");Serial.print(altitude);Serial.println(" m");updateSerial();
  Serial.print(" Температура: ");Serial.print(temperature);Serial.println(" +-0,01°C");updateSerial();
  Serial.print(" Плотность: ");Serial.print(density);Serial.println(" kg/m^3");updateSerial();
  // если прошёл интервал нагрева датчика
  // и калибровка не была совершена
  Serial.println("mq8:");updateSerial;
  if (!mq8.isCalibrated() && mq8.heatingCompleted()) {
    mq8.calibrate();
    Serial.print(" Сопротивление = ");Serial.println(mq8.getRo());
    updateSerial();
  }  
  if (mq8.isCalibrated() && mq8.heatingCompleted()){
          // выводим отношения текущего сопротивление датчика mq8
    // к сопротивлению датчика в чистом воздухе (Rs/Ro)
    Serial.print(" Отношение текущего сопротивления датчика к сопротивлению датчика в чистом воздухе: ");Serial.println(mq8.readRatio());updateSerial();
    // выводим значения газов в ppm
    Serial.print(" Водород: ");Serial.print(mq8.readHydrogen());Serial.println(" ppm ");updateSerial();
  } 
  Serial.println("mq9:");updateSerial;
  if (!mq9.isCalibrated() && mq9.heatingCompleted()) {
    // выполняем калибровку датчика на чистом воздухе
    mq9.calibrate();
    // выводим сопротивление датчика в чистом воздухе (Ro) в serial-порт
    Serial.print(" Сопротивление = ");Serial.println(mq9.getRo());updateSerial();
  }
  // если прошёл интевал нагрева датчика
  // и калибровка была совершена
  if (mq9.isCalibrated() && mq9.heatingCompleted()) {
    // выводим отношения текущего сопротивление датчика mq9
    // к сопротивлению датчика в чистом воздухе (Rs/Ro)
    Serial.print(" Отношение текущего сопротивления датчика к сопротивлению датчика в чистом воздухе: ");Serial.println(mq9.readRatio());updateSerial();
    // выводим значения газов в ppm
    Serial.print(" Сжиженные нефтяные газы: ");Serial.print(mq9.readLPG());Serial.println(" ppm ");updateSerial();
    Serial.print(" Метан: ");Serial.print(mq9.readMethane());Serial.println(" ppm ");updateSerial();
    Serial.print(" Монооксид углерода: ");Serial.print(mq9.readCarbonMonoxide());Serial.println(" ppm ");updateSerial();
    updateSerial();
    }

   updateSerial();
   delay(10000);
}

void sms(String text, String phone)  //процедура отправки СМС
{
  Serial.println("SMS send started");
  mySerial.println("AT+CMGS=\"" + phone + "\"");
  delay(500);
  mySerial.print(text);
  delay(500);
  mySerial.print((char)26);
  delay(500);
  Serial.println("SMS send complete");
  delay(2000);
}

void updateSerial()
{
  delay(500);
  while (Serial.available())
  {
    // Пересылка того, что было получено с аппаратного последовательного порта, 
    // на программный последовательный порт
    mySerial.write(Serial.read());
    Inf += Serial.read();
  }
 
  while(mySerial.available()) {
    // Пересылка того, что было получено с программного последовательного порта, 
    // на аппаратный последовательный порт
    Serial.write(mySerial.read());
  }
}
